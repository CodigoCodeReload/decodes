{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Pica Game Timer API",
		"description": "Complete API collection for the Pica Game Timer application. This collection includes all endpoints for authentication, game management, and leaderboard functionality.\n\n## Usage Instructions:\n1. Set the `baseUrl` variable to your server URL (e.g., http://localhost:3000)\n2. Run the Register or Login request first to get a JWT token\n3. The token will be automatically set for authenticated requests\n4. Test the game flow: Start Game → Stop Game → View Leaderboard\n\n## Environment Variables:\n- `baseUrl`: Base URL of the API server\n- `authToken`: JWT token (automatically set after login)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('userId');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"});",
									"",
									"// Save token for future requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('authToken', jsonData.token);",
									"    console.log('Auth token saved:', jsonData.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"testpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account. Returns a JWT token upon successful registration."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('userId');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"});",
									"",
									"// Save token for future requests",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('authToken', jsonData.token);",
									"    console.log('Auth token saved:', jsonData.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"testpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials. Returns a JWT token upon successful authentication."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration and login. These endpoints return JWT tokens that are required for accessing protected routes."
		},
		{
			"name": "Game Management",
			"item": [
				{
					"name": "Start Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('gameId');",
									"    pm.expect(jsonData).to.have.property('startTime');",
									"});",
									"",
									"// Save game ID for stop request",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('gameId', jsonData.gameId);",
									"    pm.collectionVariables.set('startTime', jsonData.startTime);",
									"    console.log('Game started with ID:', jsonData.gameId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"start\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/game/start",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"game",
								"start"
							]
						},
						"description": "Start a new game timer. Requires authentication. Returns a game ID and start timestamp."
					},
					"response": []
				},
				{
					"name": "Stop Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('result');",
									"    pm.expect(jsonData.result).to.have.property('duration');",
									"    pm.expect(jsonData.result).to.have.property('score');",
									"    pm.expect(jsonData.result).to.have.property('perfect');",
									"});",
									"",
									"// Test score calculation",
									"pm.test(\"Score is calculated correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.score).to.be.a('number');",
									"    pm.expect(jsonData.result.score).to.be.at.least(0);",
									"    pm.expect(jsonData.result.duration).to.be.a('number');",
									"    pm.expect(jsonData.result.perfect).to.be.a('boolean');",
									"});",
									"",
									"console.log('Game completed with score:', pm.response.json().result.score);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"stop\",\n    \"stopTime\": {{$timestamp}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/game/stop",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"game",
								"stop"
							]
						},
						"description": "Stop the current game timer. Requires authentication. Calculates the score based on how close the duration is to exactly 10 seconds."
					},
					"response": []
				}
			],
			"description": "Game management endpoints for starting and stopping game timers. These endpoints handle the core game logic and scoring system."
		},
		{
			"name": "Leaderboard",
			"item": [
				{
					"name": "Get Leaderboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// Test leaderboard entry structure",
									"pm.test(\"Leaderboard entries have required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const entry = jsonData[0];",
									"        pm.expect(entry).to.have.property('username');",
									"        pm.expect(entry).to.have.property('score');",
									"        pm.expect(entry).to.have.property('duration');",
									"        pm.expect(entry).to.have.property('timestamp');",
									"    }",
									"});",
									"",
									"// Test leaderboard sorting",
									"pm.test(\"Leaderboard is sorted by score (descending)\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(jsonData[i].score).to.be.at.least(jsonData[i + 1].score);",
									"        }",
									"    }",
									"});",
									"",
									"console.log('Leaderboard entries:', pm.response.json().length);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/leaderboard",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"leaderboard"
							]
						},
						"description": "Get the current leaderboard with top scores. Requires authentication. Returns an array of game results sorted by score."
					},
					"response": []
				}
			],
			"description": "Leaderboard endpoints for retrieving game scores and rankings."
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Server Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response time",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"console.log('Server is healthy and responding in', pm.response.responseTime, 'ms');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Basic health check endpoint to verify server is running and responsive."
					},
					"response": []
				}
			],
			"description": "Health check and utility endpoints for monitoring server status."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log request details",
					"console.log('Making request to:', pm.request.url.toString());",
					"",
					"// Add timestamp for stop game requests",
					"if (pm.request.url.path && pm.request.url.path.includes('stop')) {",
					"    pm.request.body.raw = pm.request.body.raw.replace('{{$timestamp}}', Date.now());",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test for all requests",
					"pm.test(\"Response has valid JSON\", function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"// Log response details",
					"console.log('Response status:', pm.response.status);",
					"console.log('Response time:', pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string",
			"description": "Base URL of the Pica Game Timer API server"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string",
			"description": "JWT authentication token (automatically set after login)"
		},
		{
			"key": "gameId",
			"value": "",
			"type": "string",
			"description": "Current game session ID (automatically set when starting a game)"
		},
		{
			"key": "startTime",
			"value": "",
			"type": "string",
			"description": "Game start timestamp (automatically set when starting a game)"
		}
	]
}
